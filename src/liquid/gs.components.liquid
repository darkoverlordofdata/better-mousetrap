/**
 * Entitas Generated Entity & Components for {{ namespace }}
 *
 * do not edit this file
 */
[indent=4]
namespace entitas

{% for flag in flags %}    const {{ flag.key }}:uint64 = {{ flag.value }}
{% endfor %}
    const ACTIVE:uint64 = 0x8000000000000000
    /**
    * Components
    */
    const ComponentString: array of string = {
        "CoreComponent",
{% for component in components %}        "{{ component.key }}Component",
{% endfor %}        ""
    }

    enum Components
        CoreComponent
{% for component in components %}        {{ component.key }}Component
{% endfor %}        COUNT
{% for component in components %}
    struct {{ component.key }}
{% if component.value == false %}        active : bool
{% else %}{% for field in component.value %}        {{ field | property }} : {{ field | fieldType }} 
{% endfor %}{% endif %}{% endfor %}
    struct Entity                       /* Core component: */  
        id          : int               /* sequentially assigned id# */
        name        : string            /* display name */
        pool        : int               /* pool entities by type */
        mask        : uint64            /* hasComponent bit array */
{% for component in components %}        {{ component.key | camel }}   : {{ component.key }}?
{% endfor %}
        def hasComponent(index : int) : bool
            return (POW2[index] & mask) != 0

        def hasComponents(indices : array of int) : bool
            for var index in indices do if (POW2[index] & mask) == 0 do return false
            return true

        def hasAnyComponent(indices : array of int) : bool
            for var index in indices do if (POW2[index] & mask) != 0 do return true
            return false

        def setId(id:int):Entity*
            this.id = id
            return &this

        def setName(name:string):Entity*
            this.name = name
            return &this

        def setActive(active:bool):Entity*
            if active do mask |= ACTIVE
            else do mask ^= ACTIVE
            return &this

        def setPool(pool:int):Entity*
            this.pool = pool
            return &this

        def isActive():bool
            return (mask & ACTIVE) == ACTIVE

        /**
         * Components:
         */
{% for component in components %}{% if component.value == false %}
        def set{{ component.key }}(value:bool):Entity*
            if value
                this.{{ component.key | camel }} = { true }
                mask |= {{ component.key | upcase }}
                World.onComponentAdded(&this, Components.{{ component.key }}Component)
            else
                this.{{ component.key | camel }} = null
                mask ^= {{ component.key | upcase }}
                World.onComponentRemoved(&this, Components.{{ component.key }}Component)
            return &this

        def is{{ component.key }}():bool
            if this.{{ component.key | camel }} == null do return false
            else do return true
{% else %}
        def add{{ component.key }}({{ component.value }}):Entity* 
            if (mask & {{ component.key | upcase }}) != 0 do raise new Exception.EntityAlreadyHasComponent("{{ component.key }}Component")
            this.{{ component.key | camel }} = { {{ component.value | paramsonly }} }
            mask |= {{ component.key | upcase }}
            World.onComponentAdded(&this, Components.{{ component.key }}Component)
            return &this

        def set{{ component.key }}({{ component.value }}):Entity*
            if (mask & {{ component.key | upcase }}) == 0 do raise new Exception.EntityDoesNotHaveComponent("{{ component.key }}Component")
            {% for field in component.value %}this.{{ component.key | camel }}.{{ field | property }} = {{ field | property | camel }}
            {% endfor %}return &this

        def remove{{ component.key }}():Entity*
            if (mask & {{ component.key | upcase }}) == 0 do raise new Exception.EntityDoesNotHaveComponent("{{ component.key }}Component")
            this.{{ component.key | camel }} = null
            mask ^= {{ component.key | upcase }}
            World.onComponentRemoved(&this, Components.{{ component.key }}Component)
            return &this
{% endif %}{% endfor %}